{"version":3,"sources":["components/NavBar/NavBar.js","components/Banner/Banner.js","components/MovieDetail/MovieDetail.js","hooks/use-Http.js","components/ListFilm/MovieList.js","pages/browse/Browse.jsx","components/SearchComponent/SearchForm/SearchForm.js","components/SearchComponent/ResultList/ResultList.js","pages/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","useState","onTop","setOntop","useEffect","window","addEventListener","scrollY","className","style","backgroundColor","href","fill","aria-hidden","data-prefix","data-icon","role","xmlns","viewBox","d","Banner","aRandomFilm","useRef","bannerFilm","setBannerFilm","fetchData","useCallback","fetch","then","response","json","data","results","current","Math","floor","random","length","id","name","bannerImg","backdrop_path","detail","overview","catch","e","console","log","backgroundImage","backgroundSize","height","i","memo","props","youtubeVideoLink","movieId","movieImg","videoData","setVideoData","url","fetchMovieData","ok","Error","message","forEach","element","site","type","key","movieName","releaseDate","vote","details","maxWidth","src","alt","title","width","useHttp","requestType","getData","MovieList","setResults","showDetail","setShowDetail","movieData","setMovieData","onShowMovieId","setOnShowMovieId","ListType","listItem","urlImg","ListName","map","item","poster_path","onClick","img","release_date","first_air_date","vote_average","Browse","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchSearch","SearchForm","enteredMovie","setEnteredMovie","placeholder","onChange","event","target","value","onKeyDown","preventDefault","getInputData","ResultList","input","searchResult","setSearchResult","reponse","trim","color","Search","inputData","setInputData","App","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ffcaacc5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n  const [onTop, setOntop] = useState(true);\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      //Hàm để xử lý khi cuộn trang\r\n      //console.log(window.scrollY);\r\n      if (window.scrollY >= 100) {\r\n        setOntop(false);\r\n      } else {\r\n        setOntop(true);\r\n      }\r\n    };\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n  return (\r\n    <div\r\n      className=\"NavBar\"\r\n      style={\r\n        onTop\r\n          ? {}\r\n          : {\r\n              backgroundColor: \"#333\",\r\n            }\r\n      } //Kiểm tra xem có đang ở đầu trang hay ko, nếu đúng thì ko đổi màu, nếu ko thì đổi màu\r\n    >\r\n      <a href=\"/\">Movie App</a>\r\n      <a href=\"/search\">\r\n        <span>\r\n          <svg\r\n            className=\"svg-inline--fa fa-search fa-w-16\"\r\n            fill=\"#ccc\"\r\n            aria-hidden=\"true\"\r\n            data-prefix=\"fas\"\r\n            data-icon=\"search\"\r\n            role=\"img\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 512 512\"\r\n          >\r\n            <path d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"></path>\r\n          </svg>\r\n        </span>\r\n      </a>\r\n      {/* <div className=\"test\"></div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useRef, useCallback, useEffect, useState } from \"react\";\r\nimport \"./Banner.css\";\r\nconst Banner = () => {\r\n  let aRandomFilm = useRef({}); // Sử dụng useRef để có thể lấy được dữ liệu ngay ca khi trong hàm useCallback\r\n  const [bannerFilm, setBannerFilm] = useState({});\r\n  const fetchData = useCallback(() => {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/discover/movie?api_key=9d7b2325092f152dc0037a909884bcfb&with_network=123`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //   console.log(data);\r\n        const results = data.results;\r\n        // console.log(results);\r\n        aRandomFilm.current =\r\n          results[Math.floor(Math.random() * results.length - 1)]; // Lấy ngẫu nhiên 1 phim trong danh sách\r\n        // console.log(aRandomFilm);\r\n        setBannerFilm({\r\n          id: aRandomFilm.current.id || `This movie have no Id.`,\r\n          name: aRandomFilm.current.name,\r\n          bannerImg:\r\n            `https://image.tmdb.org/t/p/original` +\r\n            aRandomFilm.current.backdrop_path,\r\n          detail:\r\n            aRandomFilm.current.overview || \"This movie have no description.\",\r\n        });\r\n        // console.log(bannerFilm);\r\n        // console.log(bannerFilm.bannerImg);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    // sử dụng useEffect để hàm fetchData chỉ chạy 1 lần lúc load trang\r\n    fetchData();\r\n  }, [fetchData]);\r\n  return (\r\n    <div\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url('${bannerFilm.bannerImg}')`,\r\n        backgroundSize: `cover`,\r\n        height: \"50rem\",\r\n      }}\r\n    >\r\n      <div>\r\n        <h1>{bannerFilm.name}</h1>\r\n        <div>\r\n          <button>Play</button>\r\n          <button>My List</button>\r\n          <p>{bannerFilm.detail}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import { memo, useCallback, useEffect, useState } from \"react\";\r\nimport \"./MovieDetail.css\";\r\nimport React from \"react\";\r\nconst MovieDetail = (props) => {\r\n  // console.log(\"Đây là props\", props);\r\n  const movieId = props.movieId;\r\n  const movieImg = `https://image.tmdb.org/t/p/original` + props.movieImg;\r\n  const [videoData, setVideoData] = useState([]);\r\n  const url = `https://api.themoviedb.org/3//movie/${movieId}/videos?api_key=9d7b2325092f152dc0037a909884bcfb`;\r\n  let youtubeVideoLink; // lưu trữ thông tin video trailer nếu lấy được\r\n  const fetchMovieData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const data = await response.json();\r\n      // console.log(data.results);\r\n      // getData(data.results);\r\n\r\n      setVideoData(data.results); // Lấy dữ liệu video trả về sau khi fetch\r\n      return data.results;\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    fetchMovieData();\r\n  }, [fetchMovieData]);\r\n\r\n  // console.log(videoData);\r\n\r\n  if (videoData.length !== 0) {\r\n    videoData.forEach((element) => {\r\n      if (\r\n        element.site === `YouTube` &&\r\n        (element.type === `Trailer` || element.type === `Teaser`) // Kiểm tra để lấy được đúng video trailer hoặc teaser từ youtube\r\n      ) {\r\n        youtubeVideoLink = `https://www.youtube.com/embed/` + element.key;\r\n      }\r\n      return; // Tìm thấy kết quả thì break\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"movieDetail\">\r\n      <div className=\"detailContent\">\r\n        <h2>{props.movieName}</h2>\r\n        <p>Release Date: {props.releaseDate}</p>\r\n        <p>Vote: {props.vote} / 10</p>\r\n        <p>{props.details}</p>\r\n      </div>\r\n      {\r\n        <div className=\"detailVideo\">\r\n          {videoData.length === 0 ? (\r\n            <img\r\n              className=\"detailImage\"\r\n              style={{ maxWidth: \"600px\" }}\r\n              src={movieImg}\r\n              alt={props.movieName}\r\n            ></img>\r\n          ) : (\r\n            <div>\r\n              <iframe\r\n                title={props.movieName}\r\n                width=\"100%\"\r\n                height=\"400\"\r\n                src={youtubeVideoLink}\r\n              ></iframe>\r\n            </div>\r\n          )}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(MovieDetail);\r\n","import { useCallback, useEffect } from \"react\";\r\nconst useHttp = (requestType, getData) => {\r\n  // let results = [];\r\n  let url = `https://api.themoviedb.org/3${requestType}`;\r\n  // console.log(url);\r\n  const fetchMovieData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${url}`);\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!!!\");\r\n      }\r\n      const data = await response.json();\r\n      // console.log(data.results);\r\n      getData(data.results);\r\n      // data.results.map((item) => results.push(item)); // Đổ dữ liệu vào mảng results để lấy kết quả\r\n      return data.results;\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [url]);\r\n  useEffect(() => {\r\n    //Sử dụng effect để lấy dữ liệu xuống 1 lần\r\n    fetchMovieData();\r\n  }, [fetchMovieData]);\r\n\r\n  return;\r\n};\r\n\r\nexport default useHttp;\r\n","import React, { useState } from \"react\";\r\nimport MovieDetail from \"../MovieDetail/MovieDetail\";\r\nimport useHttp from \"../../hooks/use-Http\";\r\n\r\nimport \"./MovieList.css\";\r\nconst MovieList = (props) => {\r\n  const [results, setResults] = useState([]);\r\n  const [showDetail, setShowDetail] = useState(false); // Kiểm soát trạng thái ẩn/ hiện khi click vào chi tiết từng phim\r\n  const [movieData, setMovieData] = useState({}); // Kiểm soát thông tin của phim được click vào.\r\n  const [onShowMovieId, setOnShowMovieId] = useState(0); // Lấy id của phim cũ, để so sánh khi click vào 1 bộ phim khác\r\n  const getData = (listItem) => {\r\n    setResults(listItem);\r\n  };\r\n  useHttp(props.ListType, getData);\r\n\r\n  const urlImg = `https://image.tmdb.org/t/p/original`;\r\n  return (\r\n    <div>\r\n      <div className=\"MovieSection\">\r\n        {props.ListName !== `Original` ? <h2>{props.ListName}</h2> : <></>}\r\n        <div className=\"MovieList\">\r\n          {results.map((item) => (\r\n            <img\r\n              className=\"imgItem\"\r\n              key={item.id}\r\n              src={\r\n                props.ListName !== `Original` // Kiểm tra nếu khác Original list thì hiển thị hình ảnh backdrop, ngược lại thì hiển thị poster\r\n                  ? urlImg + (item.backdrop_path || item.poster_path)\r\n                  : urlImg + item.poster_path\r\n              }\r\n              alt={item.name}\r\n              onClick={() => {\r\n                // console.log(`đây là thông tin phim được click:`, item);\r\n                setMovieData({\r\n                  // Lưu trữ thông tin của phim\r\n                  movieId: item.id,\r\n                  movieName: item.title || item.name,\r\n                  img: item.backdrop_path || item.poster_path,\r\n                  releaseDate: item.release_date || item.first_air_date,\r\n                  vote: item.vote_average,\r\n                  details: item.overview || \"This movie have no description.\",\r\n                });\r\n                // console.log(\"đây là tên phim: \", movieData);\r\n                if (onShowMovieId === item.id) {\r\n                  setShowDetail(!showDetail); // chuyển trạng thái đóng/mở chi tiết phim nếu click vào phim cũ\r\n                } else {\r\n                  setShowDetail(true);\r\n                }\r\n                setOnShowMovieId(item.id);\r\n\r\n                // console.log(movieData); // Chỗ này kiểm tra có thông tin\r\n              }}\r\n            ></img>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {showDetail && (\r\n        <MovieDetail\r\n          movieId={movieData.movieId}\r\n          movieName={movieData.movieName}\r\n          movieImg={movieData.img}\r\n          releaseDate={movieData.releaseDate}\r\n          vote={movieData.vote}\r\n          details={movieData.details}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport Banner from \"../../components/Banner/Banner\";\nimport MovieList from \"../../components/ListFilm/MovieList\";\nimport \"./Browse.css\";\n\nfunction Browse() {\n  const API_KEY = `9d7b2325092f152dc0037a909884bcfb`;\n  const requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/movie?api_key=${API_KEY}&with_network=123`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n    fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`,\n  };\n  // console.log(`đây là request type:`, requests.fetchTopRated);\n  return (\n    <div className=\"app\">\n      <NavBar></NavBar>\n      <Banner></Banner>\n      <div className=\"content\">\n        <MovieList\n          ListType={requests.fetchNetflixOriginals}\n          ListName=\"Original\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchTrending}\n          ListName=\"Xu hướng\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchTopRated}\n          ListName=\"Xếp hạng cao\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchActionMovies}\n          ListName=\"Phim hành động\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchComedyMovies}\n          ListName=\"Phim hài\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchHorrorMovies}\n          ListName=\"Phim kinh dị\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchRomanceMovies}\n          ListName=\"Phim lãng mạn\"\n        ></MovieList>\n        <MovieList\n          ListType={requests.fetchDocumentaries}\n          ListName=\"Phim tài liệu\"\n        ></MovieList>\n      </div>\n    </div>\n  );\n}\n\nexport default Browse;\n","import \"./SearchForm.css\";\r\nimport React, { useState } from \"react\";\r\nconst SearchForm = (props) => {\r\n  const [enteredMovie, setEnteredMovie] = useState(\"\");\r\n  const inputChangeHandler = (event) => {\r\n    setEnteredMovie(event.target.value);\r\n  };\r\n  const resetHandler = (event) => {\r\n    event.preventDefault(); // ngăn sự kiện submit\r\n    setEnteredMovie(\"\"); // làm mới input\r\n  };\r\n  const searchHandler = (event) => {\r\n    event.preventDefault(); // ngăn sự kiện submit\r\n    // console.log(props);\r\n    props.getInputData(enteredMovie); // truyền dữ liệu được nhập lên component cha\r\n    // setEnteredMovie(\"\");\r\n  };\r\n  const handleKeyPress = (event) => {\r\n    // Bắt sự kiện bấm nút enter\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault(); // ngăn sự kiện submit\r\n      // console.log(props);\r\n      props.getInputData(enteredMovie); // truyền dữ liệu được nhập lên component cha\r\n      // setEnteredMovie(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"searchForm\">\r\n      <div className=\"wrapper\">\r\n        <form>\r\n          <div className=\"topForm\">\r\n            <input\r\n              placeholder=\"Input your keyword\"\r\n              onChange={inputChangeHandler}\r\n              onKeyDown={handleKeyPress}\r\n              value={enteredMovie}\r\n            ></input>\r\n            <span>\r\n              <svg\r\n                className=\"svg-inline--fa fa-search fa-w-16\"\r\n                fill=\"#ccc\"\r\n                aria-hidden=\"true\"\r\n                data-prefix=\"fas\"\r\n                data-icon=\"search\"\r\n                role=\"img\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 512 512\"\r\n              >\r\n                <path d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"></path>\r\n              </svg>\r\n            </span>\r\n          </div>\r\n          <div className=\"botForm\">\r\n            <button className=\"resetBtn\" onClick={resetHandler}>\r\n              Reset\r\n            </button>\r\n            <button className=\"searchBtn\" onClick={searchHandler}>\r\n              Search\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport MovieDetail from \"../../MovieDetail/MovieDetail\";\r\nimport \"./ResultList.css\";\r\nconst ResultList = (props) => {\r\n  // console.log(props.input);\r\n  const imgPath = `https://image.tmdb.org/t/p/original`; // url để gắn với imgUrl\r\n  const input = props.input || \"\";\r\n  const url =\r\n    `https://api.themoviedb.org/3/search/movie?api_key=9d7b2325092f152dc0037a909884bcfb&language=en-US&page=1&query=` +\r\n    input;\r\n  const [searchResult, setSearchResult] = useState([]); // kiểm soát kết quả trả về của tìm kiếm\r\n\r\n  const [showDetail, setShowDetail] = useState(false); // Kiểm soát trạng thái ẩn/ hiện khi click vào chi tiết từng phim\r\n  const [movieData, setMovieData] = useState({}); // Kiểm soát thông tin của phim được click vào.\r\n  const [onShowMovieId, setOnShowMovieId] = useState(0); // Lấy id của phim cũ, để so sánh khi click vào 1 bộ phim khác\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (input) {\r\n      //Nếu lấy được dữ liệu thì mới fetchData\r\n      const reponse = await fetch(url);\r\n      const data = await reponse.json();\r\n      // console.log(\"dữ liệu tìm kiếm:\", data.results);\r\n      setSearchResult(data.results);\r\n    }\r\n  }, [input, url]);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n  return (\r\n    <div className=\"searchResult\">\r\n      <h3>Search Result</h3>\r\n\r\n      <div className=\"resultList\">\r\n        {searchResult.length > 0 ? ( // kiểm tra nếu có kết quả tìm kiếm thì mới render poster, nếu ko có kết quả thì in ra ko có kết quả\r\n          searchResult.map(\r\n            (item) =>\r\n              item.poster_path && ( // Nếu có link ảnh thì mới hiển thị\r\n                <img\r\n                  className=\"imgItem\"\r\n                  key={item.title + item.id}\r\n                  src={imgPath + item.poster_path}\r\n                  alt={item.title}\r\n                  onClick={() => {\r\n                    setMovieData({\r\n                      // Lưu trữ thông tin của phim\r\n                      movieId: item.id,\r\n                      movieName: item.title,\r\n                      img: item.backdrop_path,\r\n                      releaseDate: item.release_date || item.first_air_date,\r\n                      vote: item.vote_average,\r\n                      details:\r\n                        item.overview || \"This movie have no description.\",\r\n                    });\r\n                    setShowDetail(!showDetail);\r\n\r\n                    if (onShowMovieId === item.id) {\r\n                      setShowDetail(!showDetail); // chuyển trạng thái đóng/mở chi tiết phim nếu click vào phim cũ\r\n                    } else {\r\n                      setShowDetail(true);\r\n                    }\r\n                    setOnShowMovieId(item.id); // Lưu lại thông tin id phim hiện tại để khi click vào phim mới đem ra so sánh, nếu id phim mới khác phim cũ thì hiển thị thông tin phim mới, nếu giống id cũ thì đóng thẻ MovieDetail\r\n                  }}\r\n                ></img>\r\n              )\r\n          )\r\n        ) : (\r\n          <div>No Result</div>\r\n        )}\r\n      </div>\r\n      {(!input || input.trim() === \"\") && (\r\n        //Kiểm tra input của người dùng có hợp lệ hay ko?\r\n        <p style={{ color: `red` }}>Please insert your keyword</p>\r\n      )}\r\n      {showDetail && ( // Hiển thị thông tin phim khi trang thái này thay đổi\r\n        <MovieDetail\r\n          movieId={movieData.movieId}\r\n          movieName={movieData.movieName}\r\n          movieImg={movieData.img}\r\n          releaseDate={movieData.releaseDate}\r\n          vote={movieData.vote}\r\n          details={movieData.details}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultList;\r\n","import React, { useState } from \"react\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport SearchForm from \"../../components/SearchComponent/SearchForm/SearchForm\";\nimport ResultList from \"../../components/SearchComponent/ResultList/ResultList\";\nimport \"./Search.css\";\nconst Search = () => {\n  const [inputData, setInputData] = useState(null);\n  function getInputData(data) {\n    //Hàm callback để lấy dữ liệu từ component con lên\n    // console.log(\"data from SearchForm:\", data);\n    setInputData(data); // đổ dữ liệu vào inputData\n  }\n  // console.log(inputData); // kiểm tra input data\n  return (\n    <div className=\"app\">\n      <NavBar></NavBar>\n      <SearchForm getInputData={getInputData}></SearchForm>\n      <ResultList\n        input={inputData === !inputData ? \"\" : inputData}\n      ></ResultList>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport {\n\tBrowserRouter,\n\tRoutes,\n\tRoute,\n} from \"react-router-dom\";\n\nimport Browse from './pages/browse/Browse';\nimport Search from './pages/search/Search';\n\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t  <Routes>\n\t\t\t<Route path=\"/\" element={<Browse/>}/>\n\t\t\t<Route path=\"/search\" element={<Search/>}/>\n\t\t  </Routes>\n\t\t</BrowserRouter>\n\t  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}